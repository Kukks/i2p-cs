using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using I2PCore.Data;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using I2PCore.Utils;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Crypto.Modes;

namespace I2PCore.Tunnel.I2NP.Messages
{
    public class VariableTunnelBuild : I2NPMessage
    {
        public override MessageTypes MessageType { get { return MessageTypes.VariableTunnelBuild; } }

        List<BuildRequestRecord> Requests;

        /// <summary>
        /// Outbound
        /// </summary>
<<<<<<< Updated upstream
        public VariableTunnelBuild(
            NetDb.NetDb db,
            I2PKeysAndCert dest, 
            I2PKeysAndCert we, 
            I2PTunnelId replytunnel, uint replymessageid, 
            int hops )
=======
        public VariableTunnelBuild( I2PKeysAndCert dest, I2PKeysAndCert we, NetDb.NetDb db, I2PTunnelId replytunnel, int hops )
>>>>>>> Stashed changes
        {
            uint messageid = BufUtils.RandomUint();

            var replykey = new I2PSessionKey();
            var replyiv = new I2PRawData( 16, true );
             
            var peers = new List<I2PKeysAndCert>();
            peers.Add( dest );
            for ( int i = 1; i < hops; ++i )
            {
                peers.Add( db.GetRandomRouterInfo().Identity );
            }

<<<<<<< Updated upstream
            Requests = new List<BuildRequestRecord>();

            BuildRequestRecord prev = null;
            for ( int i = 0; i < peers.Count; ++i )
            {
                var lasthop = i == peers.Count - 1;

                var br = new BuildRequestRecord(
                        i == 0 ? I2PTunnelId.Zero: prev.NextTunnel,
                        peers[i],
                        lasthop ? replytunnel : new I2PTunnelId(),
                        lasthop ? we : peers[i + 1],
                        replykey,
                        replyiv,
                        lasthop ? replymessageid: BufUtils.RandomUint()
                        );

                Requests.Add( br );
=======
            BuildRequestRecord prev = null;
            for ( int i = 1; i < hops; ++i )
            {
                var lasthop = i == hops - 1;

                var br = new BuildRequestRecord(
                        peers[i],
                        lasthop ? we : peers[i + 1],
                        i == 0 ? I2PTunnelId.Zero: prev.NextTunnel );

                Requests.Add( br );
                prev = br;
            }

            BuildRequestRecord prev = null;
            Requests = new List<BuildRequestRecord>();
            for ( int i = hops - 1; i >= 0; --i )
            {
                var lasthop = i == hops - 1;
                var br = new BuildRequestRecord(
                        peers[i],
                        lasthop ? we : peers[i + 1],
                        lasthop ? new I2PTunnelId() : prev.ReceiveTunnel );

                Requests.Add( br );
>>>>>>> Stashed changes
                prev = br;
            }
            Requests.Reverse();

            var clearrec = Requests[0];

            var last = Requests.Last();
            last.ToAnyone = true;
<<<<<<< Updated upstream
=======
            last.SendMessageId = BufUtils.RandomUint();
            last.NextTunnel = new I2PTunnelId( 0 );
>>>>>>> Stashed changes

            var cipher = new BufferedBlockCipher( new CbcBlockCipher( new AesEngine() ) );

            clearrec.Encrypt();
<<<<<<< Updated upstream
            for ( int i = Requests.Count - 1; i > 0; --i )
=======
            for ( int i = hops - 1; i > 0; --i )
>>>>>>> Stashed changes
            {
                cipher.Reset();
                var prevrec = Requests[i - 1];
                var key = new KeyParameter( prevrec.ReplyKey.Key );
                cipher.Init( false, new ParametersWithIV( key, prevrec.ReplyIV.Data ) );

                for ( int j = hops - 1; j >= i; --j )
                {
                    Requests[j].Encrypt( cipher );
                }
            }

            Requests.Add( new BuildRequestRecordRandom() );
            Requests.Add( new BuildRequestRecordRandom() );
<<<<<<< Updated upstream
=======
            Requests.Add( new BuildRequestRecordRandom() );
>>>>>>> Stashed changes
            Requests.Shuffle();
        }

        public override void Write( List<byte> dest )
        {
            dest.Add( (byte)Requests.Count );
            foreach ( var one in Requests )
            {
                one.Write( dest );
            }
        }

        public override string ToString()
        {
            var result = new StringBuilder();

            result.AppendLine( "VariableTunnelBuild" );

            foreach ( var one in Requests )
            {
                result.AppendLine( "BuildRequestRecord: " + one.ToString() );
            }

            return result.ToString();
        }
    }
}
